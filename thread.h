/*
 * thread.h
 *
 *  Created on: Nov 15, 2019
 *      Author: krad2
 */

#ifndef THREAD_H_
#define THREAD_H_

#include <definitions.h>
#include <config.h>

/**
 * MSP430 Trapframe
 * - Generated by the hardware on an interrupt
 * - Contains PC + SR
 */

typedef union __attribute__((packed)) {
	uint32_t value;
	uint16_t words[2];

	/**
	 * CPUX Trapframe (20-bit)
	 * - SP + 2: PC[15:0]
	 * - SP: PC[19:16], SR
	 *
	 * CPU Trapframe (16-bit)
	 * - SP + 2: PC[15:0]
	 * - SP: SR
	 */

	#if defined(__LARGE_CODE_MODEL__)

	struct {
		unsigned int sr : 12;
		unsigned int pc_high : 4;
		unsigned int pc_low : 16;
	};

	#else

	struct {
		unsigned int sr : 16;
		unsigned int pc : 16;
	};

	#endif
} hw_stackframe_t;

/**
 * Initializes trapframe from a function address and the status register
 */

int hw_stackframe_init(hw_stackframe_t *frame, pc_t pc, word_t sr);

/**
 * Software stackframe / register states
 * - Calling convention requires r4-r11 to be saved
 * - Additionally saving the scratch registers because the kernel may not corrupt these
 */

typedef struct sw_stackframe_t {
	word_t r4;
	word_t r5;
	word_t r6;
	word_t r7;
	word_t r8;
	word_t r9;
	word_t r10;
	word_t r11;
	word_t r12;
	word_t r13;
	word_t r14;
	word_t r15;
	word_t sp;
} sw_stackframe_t;

/**
 * Initializes software stack frame with starting stack pointer and
 * argument pointer
 */

int sw_stackframe_init(sw_stackframe_t *frame, word_t sp, word_t arg);

/**
 * Thread struct: contains context and data stack
 */

typedef struct thrd_t {
	sw_stackframe_t context;
	uint16_t stack[STACKSIZE];	// Need to resize to hold thrd_exit address
	pc_t ret_addr;
	size_t exec_cnt;
} thrd_t;

/**
 * Returns address of the logical bottom of a thread stack
 */

const uint8_t *thrd_stack_base(thrd_t *this);

/**
 * Initializes thread stack with kernel trapframe (needed for scheduler design)
 */

int thrd_stack_init(thrd_t *this, pc_t pc);

/**
 * Initializes thread context to reflect software stackframe state and passes arguments
 */

int thrd_context_init(thrd_t *this, word_t sp, word_t arg);

/**
 * Initializes an allocated thread
 */

int thrd_init(thrd_t *this, int (*routine)(void *), void *arg);

/**
 * Wrapper function to initialize a thread
 */

int thrd_create(int (*routine)(void *), void *arg);

/**
 * Exit handler for threads
 */

int thrd_exit(int ret_code);

#include <task_table.h>

#endif /* THREAD_H_ */
